{
  "paragraphs": [
    {
      "title": "Introduction",
      "text": "%md\n\nThis is a tutorial of how to use Spark MLlib in Zeppelin, we have 2 examples in this note:\n\n* Linear regression, we generate some random data and use a linear regression to fit this data. We use bokeh here to visualize the data and the fitted model.  Besides training, we also visualize the loss value over iteration.\n* Logstic regression, we use the official `sample_binary_classification_data` of spark as the training data. Besides training, we also visualize the loss value over iteration.\n",
      "user": "anonymous",
      "dateUpdated": "2021-07-26T04:31:55+0000",
      "progress": 0,
      "config": {
        "runOnSelectionChange": true,
        "title": true,
        "checkEmpty": true,
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/text",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "<div class=\"markdown-body\">\n<p>This is a tutorial of how to use Spark MLlib in Zeppelin, we have 2 examples in this note:</p>\n<ul>\n<li>Linear regression, we generate some random data and use a linear regression to fit this data. We use bokeh here to visualize the data and the fitted model.  Besides training, we also visualize the loss value over iteration.</li>\n<li>Logstic regression, we use the official <code>sample_binary_classification_data</code> of spark as the training data. Besides training, we also visualize the loss value over iteration.</li>\n</ul>\n\n</div>"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1579424966763_-908073771",
      "id": "paragraph_1579424966763_-908073771",
      "dateCreated": "2020-01-19T17:09:26+0000",
      "dateStarted": "2021-07-26T04:31:55+0000",
      "dateFinished": "2021-07-26T04:31:57+0000",
      "status": "FINISHED",
      "focus": true,
      "$$hashKey": "object:9616"
    },
    {
      "title": "Initialize bokeh for visualization",
      "text": "%spark.pyspark\n\n\nimport numpy as np\nfrom bokeh.io import output_notebook, show\nfrom bokeh.plotting import figure\n\noutput_notebook()\n\n",
      "user": "anonymous",
      "dateUpdated": "2021-07-26T04:31:57+0000",
      "progress": 0,
      "config": {
        "colWidth": 12,
        "editorMode": "ace/mode/python",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "fontSize": 9,
        "runOnSelectionChange": true,
        "title": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\n    <div class=\"bk-root\">\n        <a href=\"https://bokeh.org\" target=\"_blank\" class=\"bk-logo bk-logo-small bk-logo-notebook\"></a>\n        <span id=\"1002\">Loading BokehJS ...</span>\n    </div>\n"
          },
          {
            "type": "HTML",
            "data": "<script> \n(function(root) {\n  function now() {\n    return new Date();\n  }\n\n  var force = true;\n\n  if (typeof root._bokeh_onload_callbacks === \"undefined\" || force === true) {\n    root._bokeh_onload_callbacks = [];\n    root._bokeh_is_loading = undefined;\n  }\n\n  var JS_MIME_TYPE = 'application/javascript';\n  var HTML_MIME_TYPE = 'text/html';\n  var EXEC_MIME_TYPE = 'application/vnd.bokehjs_exec.v0+json';\n  var CLASS_NAME = 'output_bokeh rendered_html';\n\n  /**\n   * Render data to the DOM node\n   */\n  function render(props, node) {\n    var script = document.createElement(\"script\");\n    node.appendChild(script);\n  }\n\n  /**\n   * Handle when an output is cleared or removed\n   */\n  function handleClearOutput(event, handle) {\n    var cell = handle.cell;\n\n    var id = cell.output_area._bokeh_element_id;\n    var server_id = cell.output_area._bokeh_server_id;\n    // Clean up Bokeh references\n    if (id != null && id in Bokeh.index) {\n      Bokeh.index[id].model.document.clear();\n      delete Bokeh.index[id];\n    }\n\n    if (server_id !== undefined) {\n      // Clean up Bokeh references\n      var cmd = \"from bokeh.io.state import curstate; print(curstate().uuid_to_server['\" + server_id + \"'].get_sessions()[0].document.roots[0]._id)\";\n      cell.notebook.kernel.execute(cmd, {\n        iopub: {\n          output: function(msg) {\n            var id = msg.content.text.trim();\n            if (id in Bokeh.index) {\n              Bokeh.index[id].model.document.clear();\n              delete Bokeh.index[id];\n            }\n          }\n        }\n      });\n      // Destroy server and session\n      var cmd = \"import bokeh.io.notebook as ion; ion.destroy_server('\" + server_id + \"')\";\n      cell.notebook.kernel.execute(cmd);\n    }\n  }\n\n  /**\n   * Handle when a new output is added\n   */\n  function handleAddOutput(event, handle) {\n    var output_area = handle.output_area;\n    var output = handle.output;\n\n    // limit handleAddOutput to display_data with EXEC_MIME_TYPE content only\n    if ((output.output_type != \"display_data\") || (!Object.prototype.hasOwnProperty.call(output.data, EXEC_MIME_TYPE))) {\n      return\n    }\n\n    var toinsert = output_area.element.find(\".\" + CLASS_NAME.split(' ')[0]);\n\n    if (output.metadata[EXEC_MIME_TYPE][\"id\"] !== undefined) {\n      toinsert[toinsert.length - 1].firstChild.textContent = output.data[JS_MIME_TYPE];\n      // store reference to embed id on output_area\n      output_area._bokeh_element_id = output.metadata[EXEC_MIME_TYPE][\"id\"];\n    }\n    if (output.metadata[EXEC_MIME_TYPE][\"server_id\"] !== undefined) {\n      var bk_div = document.createElement(\"div\");\n      bk_div.innerHTML = output.data[HTML_MIME_TYPE];\n      var script_attrs = bk_div.children[0].attributes;\n      for (var i = 0; i < script_attrs.length; i++) {\n        toinsert[toinsert.length - 1].firstChild.setAttribute(script_attrs[i].name, script_attrs[i].value);\n        toinsert[toinsert.length - 1].firstChild.textContent = bk_div.children[0].textContent\n      }\n      // store reference to server id on output_area\n      output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE][\"server_id\"];\n    }\n  }\n\n  function register_renderer(events, OutputArea) {\n\n    function append_mime(data, metadata, element) {\n      // create a DOM node to render to\n      var toinsert = this.create_output_subarea(\n        metadata,\n        CLASS_NAME,\n        EXEC_MIME_TYPE\n      );\n      this.keyboard_manager.register_events(toinsert);\n      // Render to node\n      var props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};\n      render(props, toinsert[toinsert.length - 1]);\n      element.append(toinsert);\n      return toinsert\n    }\n\n    /* Handle when an output is cleared or removed */\n    events.on('clear_output.CodeCell', handleClearOutput);\n    events.on('delete.Cell', handleClearOutput);\n\n    /* Handle when a new output is added */\n    events.on('output_added.OutputArea', handleAddOutput);\n\n    /**\n     * Register the mime type and append_mime function with output_area\n     */\n    OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {\n      /* Is output safe? */\n      safe: true,\n      /* Index of renderer in `output_area.display_order` */\n      index: 0\n    });\n  }\n\n  // register the mime type if in Jupyter Notebook environment and previously unregistered\n  if (root.Jupyter !== undefined) {\n    var events = require('base/js/events');\n    var OutputArea = require('notebook/js/outputarea').OutputArea;\n\n    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {\n      register_renderer(events, OutputArea);\n    }\n  }\n\n  \n  if (typeof (root._bokeh_timeout) === \"undefined\" || force === true) {\n    root._bokeh_timeout = Date.now() + 5000;\n    root._bokeh_failed_load = false;\n  }\n\n  var NB_LOAD_WARNING = {'data': {'text/html':\n     \"<div style='background-color: #fdd'>\\n\"+\n     \"<p>\\n\"+\n     \"BokehJS does not appear to have successfully loaded. If loading BokehJS from CDN, this \\n\"+\n     \"may be due to a slow or bad network connection. Possible fixes:\\n\"+\n     \"</p>\\n\"+\n     \"<ul>\\n\"+\n     \"<li>re-rerun `output_notebook()` to attempt to load from CDN again, or</li>\\n\"+\n     \"<li>use INLINE resources instead, as so:</li>\\n\"+\n     \"</ul>\\n\"+\n     \"<code>\\n\"+\n     \"from bokeh.resources import INLINE\\n\"+\n     \"output_notebook(resources=INLINE)\\n\"+\n     \"</code>\\n\"+\n     \"</div>\"}};\n\n  function display_loaded() {\n    var el = document.getElementById(\"1002\");\n    if (el != null) {\n      el.textContent = \"BokehJS is loading...\";\n    }\n    if (root.Bokeh !== undefined) {\n      if (el != null) {\n        el.textContent = \"BokehJS \" + root.Bokeh.version + \" successfully loaded.\";\n      }\n    } else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(display_loaded, 100)\n    }\n  }\n\n\n  function run_callbacks() {\n    try {\n      root._bokeh_onload_callbacks.forEach(function(callback) {\n        if (callback != null)\n          callback();\n      });\n    } finally {\n      delete root._bokeh_onload_callbacks\n    }\n    console.debug(\"Bokeh: all callbacks have finished\");\n  }\n\n  function load_libs(css_urls, js_urls, callback) {\n    if (css_urls == null) css_urls = [];\n    if (js_urls == null) js_urls = [];\n\n    root._bokeh_onload_callbacks.push(callback);\n    if (root._bokeh_is_loading > 0) {\n      console.debug(\"Bokeh: BokehJS is being loaded, scheduling callback at\", now());\n      return null;\n    }\n    if (js_urls == null || js_urls.length === 0) {\n      run_callbacks();\n      return null;\n    }\n    console.debug(\"Bokeh: BokehJS not loaded, scheduling load and callback at\", now());\n    root._bokeh_is_loading = css_urls.length + js_urls.length;\n\n    function on_load() {\n      root._bokeh_is_loading--;\n      if (root._bokeh_is_loading === 0) {\n        console.debug(\"Bokeh: all BokehJS libraries/stylesheets loaded\");\n        run_callbacks()\n      }\n    }\n\n    function on_error(url) {\n      console.error(\"failed to load \" + url);\n    }\n\n    for (let i = 0; i < css_urls.length; i++) {\n      const url = css_urls[i];\n      const element = document.createElement(\"link\");\n      element.onload = on_load;\n      element.onerror = on_error.bind(null, url);\n      element.rel = \"stylesheet\";\n      element.type = \"text/css\";\n      element.href = url;\n      console.debug(\"Bokeh: injecting link tag for BokehJS stylesheet: \", url);\n      document.body.appendChild(element);\n    }\n\n    const hashes = {\"https://cdn.bokeh.org/bokeh/release/bokeh-2.3.3.min.js\": \"dM3QQsP+wXdHg42wTqW85BjZQdLNNIXqlPw/BgKoExPmTG7ZLML4EGqLMfqHT6ON\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.3.3.min.js\": \"8x57I4YuIfu8XyZfFo0XVr2WAT8EK4rh/uDe3wF7YuW2FNUSNEpJbsPaB1nJ2fz2\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.3.3.min.js\": \"3QTqdz9LyAm2i0sG5XTePsHec3UHWwVsrOL68SYRoAXsafvfAyqtQ+h440+qIBhS\"};\n\n    for (let i = 0; i < js_urls.length; i++) {\n      const url = js_urls[i];\n      const element = document.createElement('script');\n      element.onload = on_load;\n      element.onerror = on_error.bind(null, url);\n      element.async = false;\n      element.src = url;\n      if (url in hashes) {\n        element.crossOrigin = \"anonymous\";\n        element.integrity = \"sha384-\" + hashes[url];\n      }\n      console.debug(\"Bokeh: injecting script tag for BokehJS library: \", url);\n      document.head.appendChild(element);\n    }\n  };\n\n  function inject_raw_css(css) {\n    const element = document.createElement(\"style\");\n    element.appendChild(document.createTextNode(css));\n    document.body.appendChild(element);\n  }\n\n  \n  var js_urls = [\"https://cdn.bokeh.org/bokeh/release/bokeh-2.3.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-widgets-2.3.3.min.js\", \"https://cdn.bokeh.org/bokeh/release/bokeh-tables-2.3.3.min.js\"];\n  var css_urls = [];\n  \n\n  var inline_js = [\n    function(Bokeh) {\n      Bokeh.set_log_level(\"info\");\n    },\n    function(Bokeh) {\n    \n    \n    }\n  ];\n\n  function run_inline_js() {\n    \n    if (root.Bokeh !== undefined || force === true) {\n      \n    for (var i = 0; i < inline_js.length; i++) {\n      inline_js[i].call(root, root.Bokeh);\n    }\n    if (force === true) {\n        display_loaded();\n      }} else if (Date.now() < root._bokeh_timeout) {\n      setTimeout(run_inline_js, 100);\n    } else if (!root._bokeh_failed_load) {\n      console.log(\"Bokeh: BokehJS failed to load within specified timeout.\");\n      root._bokeh_failed_load = true;\n    } else if (force !== true) {\n      var cell = $(document.getElementById(\"1002\")).parents('.cell').data().cell;\n      cell.output_area.append_execute_result(NB_LOAD_WARNING)\n    }\n\n  }\n\n  if (root._bokeh_is_loading === 0) {\n    console.debug(\"Bokeh: BokehJS loaded, going straight to plotting\");\n    run_inline_js();\n  } else {\n    load_libs(css_urls, js_urls, function() {\n      console.debug(\"Bokeh: BokehJS plotting callback run at\", now());\n      run_inline_js();\n    });\n  }\n}(window)); </script>\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387637676_907388241",
      "id": "20170621-112503_896367416",
      "dateCreated": "2020-01-07T17:00:37+0000",
      "dateStarted": "2021-07-26T04:31:57+0000",
      "dateFinished": "2021-07-26T04:32:15+0000",
      "status": "FINISHED",
      "$$hashKey": "object:9617"
    },
    {
      "title": "Generate Data",
      "text": "%spark.pyspark\n\nimport numpy as np\nfrom bokeh.io import output_notebook, show\nfrom bokeh.plotting import figure\n\n\nnum = 1000\nx = np.linspace(0, 10, num)\ny = 2 * x + np.random.normal(0,4, num)\n\np = figure()\np.circle(x, y)\nshow(p)",
      "user": "anonymous",
      "dateUpdated": "2021-07-26T04:32:15+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6,
        "editorMode": "ace/mode/python",
        "title": true,
        "results": {},
        "enabled": true,
        "fontSize": 9,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\n\n\n\n\n\n  <div class=\"bk-root\" id=\"f10d9be9-2e8a-43ce-9d36-1220b5a7a5e4\" data-root-id=\"1003\"></div>\n\n"
          },
          {
            "type": "HTML",
            "data": "<script> (function(root) {\n  function embed_document(root) {\n    \n  var docs_json = {\"e803d4a1-2663-44a2-bbb5-7490333e25ae\":{\"defs\":[],\"roots\":{\"references\":[{\"attributes\":{\"below\":[{\"id\":\"1012\"}],\"center\":[{\"id\":\"1015\"},{\"id\":\"1019\"}],\"left\":[{\"id\":\"1016\"}],\"renderers\":[{\"id\":\"1037\"}],\"title\":{\"id\":\"1040\"},\"toolbar\":{\"id\":\"1027\"},\"x_range\":{\"id\":\"1004\"},\"x_scale\":{\"id\":\"1008\"},\"y_range\":{\"id\":\"1006\"},\"y_scale\":{\"id\":\"1010\"}},\"id\":\"1003\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{},\"id\":\"1006\",\"type\":\"DataRange1d\"},{\"attributes\":{},\"id\":\"1047\",\"type\":\"UnionRenderers\"},{\"attributes\":{},\"id\":\"1045\",\"type\":\"AllLabels\"},{\"attributes\":{},\"id\":\"1004\",\"type\":\"DataRange1d\"},{\"attributes\":{},\"id\":\"1021\",\"type\":\"WheelZoomTool\"},{\"attributes\":{},\"id\":\"1025\",\"type\":\"HelpTool\"},{\"attributes\":{},\"id\":\"1040\",\"type\":\"Title\"},{\"attributes\":{},\"id\":\"1008\",\"type\":\"LinearScale\"},{\"attributes\":{\"axis\":{\"id\":\"1016\"},\"dimension\":1,\"ticker\":null},\"id\":\"1019\",\"type\":\"Grid\"},{\"attributes\":{\"overlay\":{\"id\":\"1026\"}},\"id\":\"1022\",\"type\":\"BoxZoomTool\"},{\"attributes\":{},\"id\":\"1048\",\"type\":\"Selection\"},{\"attributes\":{\"formatter\":{\"id\":\"1043\"},\"major_label_policy\":{\"id\":\"1042\"},\"ticker\":{\"id\":\"1017\"}},\"id\":\"1016\",\"type\":\"LinearAxis\"},{\"attributes\":{\"formatter\":{\"id\":\"1046\"},\"major_label_policy\":{\"id\":\"1045\"},\"ticker\":{\"id\":\"1013\"}},\"id\":\"1012\",\"type\":\"LinearAxis\"},{\"attributes\":{\"fill_color\":{\"value\":\"#1f77b4\"},\"line_color\":{\"value\":\"#1f77b4\"},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1035\",\"type\":\"Circle\"},{\"attributes\":{},\"id\":\"1010\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"1020\",\"type\":\"PanTool\"},{\"attributes\":{},\"id\":\"1042\",\"type\":\"AllLabels\"},{\"attributes\":{\"data\":{\"x\":{\"__ndarray__\":\"\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[1000]},\"y\":{\"__ndarray__\":\"\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[1000]}},\"selected\":{\"id\":\"1048\"},\"selection_policy\":{\"id\":\"1047\"}},\"id\":\"1034\",\"type\":\"ColumnDataSource\"},{\"attributes\":{},\"id\":\"1023\",\"type\":\"SaveTool\"},{\"attributes\":{},\"id\":\"1017\",\"type\":\"BasicTicker\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":0.5,\"fill_color\":\"lightgrey\",\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":1.0,\"line_color\":\"black\",\"line_dash\":[4,4],\"line_width\":2,\"right_units\":\"screen\",\"syncable\":false,\"top_units\":\"screen\"},\"id\":\"1026\",\"type\":\"BoxAnnotation\"},{\"attributes\":{\"data_source\":{\"id\":\"1034\"},\"glyph\":{\"id\":\"1035\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1036\"},\"view\":{\"id\":\"1038\"}},\"id\":\"1037\",\"type\":\"GlyphRenderer\"},{\"attributes\":{},\"id\":\"1043\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{\"axis\":{\"id\":\"1012\"},\"ticker\":null},\"id\":\"1015\",\"type\":\"Grid\"},{\"attributes\":{\"source\":{\"id\":\"1034\"}},\"id\":\"1038\",\"type\":\"CDSView\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"value\":\"#1f77b4\"},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"value\":\"#1f77b4\"},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1036\",\"type\":\"Circle\"},{\"attributes\":{},\"id\":\"1024\",\"type\":\"ResetTool\"},{\"attributes\":{\"active_multi\":null,\"tools\":[{\"id\":\"1020\"},{\"id\":\"1021\"},{\"id\":\"1022\"},{\"id\":\"1023\"},{\"id\":\"1024\"},{\"id\":\"1025\"}]},\"id\":\"1027\",\"type\":\"Toolbar\"},{\"attributes\":{},\"id\":\"1046\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{},\"id\":\"1013\",\"type\":\"BasicTicker\"}],\"root_ids\":[\"1003\"]},\"title\":\"Bokeh Application\",\"version\":\"2.3.3\"}};\n  var render_items = [{\"docid\":\"e803d4a1-2663-44a2-bbb5-7490333e25ae\",\"root_ids\":[\"1003\"],\"roots\":{\"1003\":\"f10d9be9-2e8a-43ce-9d36-1220b5a7a5e4\"}}];\n  root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n\n  }\n  if (root.Bokeh !== undefined) {\n    embed_document(root);\n  } else {\n    var attempts = 0;\n    var timer = setInterval(function(root) {\n      if (root.Bokeh !== undefined) {\n        clearInterval(timer);\n        embed_document(root);\n      } else {\n        attempts++;\n        if (attempts > 100) {\n          clearInterval(timer);\n          console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n        }\n      }\n    }, 10, root)\n  }\n})(window); </script>\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387637677_-677869302",
      "id": "20170621-112549_1048642377",
      "dateCreated": "2020-01-07T17:00:37+0000",
      "dateStarted": "2021-07-26T04:32:15+0000",
      "dateFinished": "2021-07-26T04:32:16+0000",
      "status": "FINISHED",
      "$$hashKey": "object:9618"
    },
    {
      "title": "Linear Regression",
      "text": "%spark.pyspark\n\n\nfrom pyspark.ml.regression import LinearRegression\nimport pandas as pd\nfrom pyspark.ml.linalg import DenseVector, Vectors, VectorUDT\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import UserDefinedType, StringType\n\nto_vector = udf(lambda x: Vectors.dense(x), VectorUDT())\n\ndf = pd.DataFrame({'features': x, 'label': y})\ntraining = spark.createDataFrame(df).withColumn('features', to_vector('features'))\n\nlr = LinearRegression(maxIter=50, regParam=0.3, elasticNetParam=0.8, solver='l-bfgs')\n\n# Fit the model\nlrModel = lr.fit(training)\n\n# Print the coefficients and intercept for linear regression\nprint(\"Coefficients: %s\" % str(lrModel.coefficients))\nprint(\"Intercept: %s\" % str(lrModel.intercept))\n\n# Summarize the model over the training set and print out some metrics\ntrainingSummary = lrModel.summary\nprint(\"numIterations: %d\" % trainingSummary.totalIterations)\nprint(\"objectiveHistory: %s\" % str(trainingSummary.objectiveHistory))\ntrainingSummary.residuals.show()\nprint(\"RMSE: %f\" % trainingSummary.rootMeanSquaredError)\nprint(\"r2: %f\" % trainingSummary.r2)\n\n\n",
      "user": "anonymous",
      "dateUpdated": "2021-07-26T04:32:16+0000",
      "progress": 100,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6,
        "editorMode": "ace/mode/python",
        "title": true,
        "results": {},
        "enabled": true,
        "fontSize": 9,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Coefficients: [1.9367837330953086]\nIntercept: 0.31946056039263304\nnumIterations: 2\nobjectiveHistory: [0.49950000000000033, 0.424180453174143, 0.18300563355387592]\n+--------------------+\n|           residuals|\n+--------------------+\n|  -2.833166305176022|\n| -0.7068594675252808|\n|  0.1322891865273667|\n|   5.456616501979674|\n|  0.8225765174346039|\n|   3.774681833437321|\n|-0.03607428902607...|\n|  -2.032649908137373|\n|  -4.083954805729507|\n|  -4.591691412436773|\n|  2.6705538935268467|\n|   2.269737051649101|\n|    2.22074748343437|\n|  3.6738694179491995|\n|  -5.647995770675787|\n| 0.44724887877671227|\n|     2.7171755410366|\n|  -2.894179997049915|\n|  2.0272052033953236|\n| -0.6040963708941917|\n+--------------------+\nonly showing top 20 rows\n\nRMSE: 3.912953\nr2: 0.692876\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=0",
              "$$hashKey": "object:10164"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=1",
              "$$hashKey": "object:10165"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=2",
              "$$hashKey": "object:10166"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=3",
              "$$hashKey": "object:10167"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=4",
              "$$hashKey": "object:10168"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=5",
              "$$hashKey": "object:10169"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=6",
              "$$hashKey": "object:10170"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=7",
              "$$hashKey": "object:10171"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=8",
              "$$hashKey": "object:10172"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387637679_-1199864234",
      "id": "20170621-120434_191947265",
      "dateCreated": "2020-01-07T17:00:37+0000",
      "dateStarted": "2021-07-26T04:32:16+0000",
      "dateFinished": "2021-07-26T04:32:24+0000",
      "status": "FINISHED",
      "$$hashKey": "object:9619"
    },
    {
      "title": "Linear Regression",
      "text": "%spark.pyspark\n\n\np = figure()\np.circle(x, y)\n\ny_predict = x * lrModel.coefficients + (lrModel.intercept)\np.line(x, y_predict, color='red', line_width=3)\n\nshow(p)",
      "user": "anonymous",
      "dateUpdated": "2021-07-26T04:32:24+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6,
        "editorMode": "ace/mode/python",
        "title": true,
        "results": {},
        "enabled": true,
        "fontSize": 9,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\n\n\n\n\n\n  <div class=\"bk-root\" id=\"bd67be9e-bf3d-494b-9f76-aff0479ccffd\" data-root-id=\"1105\"></div>\n\n"
          },
          {
            "type": "HTML",
            "data": "<script> (function(root) {\n  function embed_document(root) {\n    \n  var docs_json = {\"6e71fb5a-11ee-4c7c-b3c0-174b3cf61f72\":{\"defs\":[],\"roots\":{\"references\":[{\"attributes\":{\"below\":[{\"id\":\"1114\"}],\"center\":[{\"id\":\"1117\"},{\"id\":\"1121\"}],\"left\":[{\"id\":\"1118\"}],\"renderers\":[{\"id\":\"1139\"},{\"id\":\"1144\"}],\"title\":{\"id\":\"1158\"},\"toolbar\":{\"id\":\"1129\"},\"x_range\":{\"id\":\"1106\"},\"x_scale\":{\"id\":\"1110\"},\"y_range\":{\"id\":\"1108\"},\"y_scale\":{\"id\":\"1112\"}},\"id\":\"1105\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{\"data\":{\"x\":{\"__ndarray__\":\"\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[1000]},\"y\":{\"__ndarray__\":\"\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[1000]}},\"selected\":{\"id\":\"1166\"},\"selection_policy\":{\"id\":\"1165\"}},\"id\":\"1136\",\"type\":\"ColumnDataSource\"},{\"attributes\":{},\"id\":\"1168\",\"type\":\"Selection\"},{\"attributes\":{\"data\":{\"x\":{\"__ndarray__\":\"\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[1000]},\"y\":{\"__ndarray__\":\"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\",\"dtype\":\"float64\",\"order\":\"little\",\"shape\":[1000]}},\"selected\":{\"id\":\"1168\"},\"selection_policy\":{\"id\":\"1167\"}},\"id\":\"1141\",\"type\":\"ColumnDataSource\"},{\"attributes\":{\"data_source\":{\"id\":\"1141\"},\"glyph\":{\"id\":\"1142\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1143\"},\"view\":{\"id\":\"1145\"}},\"id\":\"1144\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"axis\":{\"id\":\"1114\"},\"ticker\":null},\"id\":\"1117\",\"type\":\"Grid\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"red\",\"line_width\":3,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1143\",\"type\":\"Line\"},{\"attributes\":{\"formatter\":{\"id\":\"1161\"},\"major_label_policy\":{\"id\":\"1160\"},\"ticker\":{\"id\":\"1119\"}},\"id\":\"1118\",\"type\":\"LinearAxis\"},{\"attributes\":{},\"id\":\"1115\",\"type\":\"BasicTicker\"},{\"attributes\":{\"formatter\":{\"id\":\"1164\"},\"major_label_policy\":{\"id\":\"1163\"},\"ticker\":{\"id\":\"1115\"}},\"id\":\"1114\",\"type\":\"LinearAxis\"},{\"attributes\":{},\"id\":\"1110\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"1127\",\"type\":\"HelpTool\"},{\"attributes\":{},\"id\":\"1108\",\"type\":\"DataRange1d\"},{\"attributes\":{},\"id\":\"1167\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"line_color\":\"red\",\"line_width\":3,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1142\",\"type\":\"Line\"},{\"attributes\":{},\"id\":\"1126\",\"type\":\"ResetTool\"},{\"attributes\":{\"axis\":{\"id\":\"1118\"},\"dimension\":1,\"ticker\":null},\"id\":\"1121\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"1125\",\"type\":\"SaveTool\"},{\"attributes\":{\"fill_color\":{\"value\":\"#1f77b4\"},\"line_color\":{\"value\":\"#1f77b4\"},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1137\",\"type\":\"Circle\"},{\"attributes\":{\"fill_alpha\":{\"value\":0.1},\"fill_color\":{\"value\":\"#1f77b4\"},\"line_alpha\":{\"value\":0.1},\"line_color\":{\"value\":\"#1f77b4\"},\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1138\",\"type\":\"Circle\"},{\"attributes\":{\"overlay\":{\"id\":\"1128\"}},\"id\":\"1124\",\"type\":\"BoxZoomTool\"},{\"attributes\":{},\"id\":\"1119\",\"type\":\"BasicTicker\"},{\"attributes\":{},\"id\":\"1161\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{},\"id\":\"1112\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"1123\",\"type\":\"WheelZoomTool\"},{\"attributes\":{},\"id\":\"1160\",\"type\":\"AllLabels\"},{\"attributes\":{},\"id\":\"1122\",\"type\":\"PanTool\"},{\"attributes\":{\"data_source\":{\"id\":\"1136\"},\"glyph\":{\"id\":\"1137\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1138\"},\"view\":{\"id\":\"1140\"}},\"id\":\"1139\",\"type\":\"GlyphRenderer\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":0.5,\"fill_color\":\"lightgrey\",\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":1.0,\"line_color\":\"black\",\"line_dash\":[4,4],\"line_width\":2,\"right_units\":\"screen\",\"syncable\":false,\"top_units\":\"screen\"},\"id\":\"1128\",\"type\":\"BoxAnnotation\"},{\"attributes\":{\"source\":{\"id\":\"1136\"}},\"id\":\"1140\",\"type\":\"CDSView\"},{\"attributes\":{},\"id\":\"1106\",\"type\":\"DataRange1d\"},{\"attributes\":{\"source\":{\"id\":\"1141\"}},\"id\":\"1145\",\"type\":\"CDSView\"},{\"attributes\":{},\"id\":\"1163\",\"type\":\"AllLabels\"},{\"attributes\":{},\"id\":\"1165\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"active_multi\":null,\"tools\":[{\"id\":\"1122\"},{\"id\":\"1123\"},{\"id\":\"1124\"},{\"id\":\"1125\"},{\"id\":\"1126\"},{\"id\":\"1127\"}]},\"id\":\"1129\",\"type\":\"Toolbar\"},{\"attributes\":{},\"id\":\"1164\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{},\"id\":\"1166\",\"type\":\"Selection\"},{\"attributes\":{},\"id\":\"1158\",\"type\":\"Title\"}],\"root_ids\":[\"1105\"]},\"title\":\"Bokeh Application\",\"version\":\"2.3.3\"}};\n  var render_items = [{\"docid\":\"6e71fb5a-11ee-4c7c-b3c0-174b3cf61f72\",\"root_ids\":[\"1105\"],\"roots\":{\"1105\":\"bd67be9e-bf3d-494b-9f76-aff0479ccffd\"}}];\n  root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n\n  }\n  if (root.Bokeh !== undefined) {\n    embed_document(root);\n  } else {\n    var attempts = 0;\n    var timer = setInterval(function(root) {\n      if (root.Bokeh !== undefined) {\n        clearInterval(timer);\n        embed_document(root);\n      } else {\n        attempts++;\n        if (attempts > 100) {\n          clearInterval(timer);\n          console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n        }\n      }\n    }, 10, root)\n  }\n})(window); </script>\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387637679_-622761908",
      "id": "20170621-120503_149885741",
      "dateCreated": "2020-01-07T17:00:37+0000",
      "dateStarted": "2021-07-26T04:32:24+0000",
      "dateFinished": "2021-07-26T04:32:24+0000",
      "status": "FINISHED",
      "$$hashKey": "object:9620"
    },
    {
      "title": "Loss",
      "text": "%spark.pyspark\n\np = figure()\np.line(range(len(trainingSummary.objectiveHistory)), trainingSummary.objectiveHistory, color='blue', line_width=3)\nshow(p)\n\n\n\n",
      "user": "anonymous",
      "dateUpdated": "2021-07-26T04:32:24+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6,
        "editorMode": "ace/mode/python",
        "title": true,
        "results": {},
        "enabled": true,
        "fontSize": 9,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\n\n\n\n\n\n  <div class=\"bk-root\" id=\"f4804a89-bbda-45bb-b2c9-7f4348ad6b73\" data-root-id=\"1235\"></div>\n\n"
          },
          {
            "type": "HTML",
            "data": "<script> (function(root) {\n  function embed_document(root) {\n    \n  var docs_json = {\"4ef43c57-2853-4063-a190-1291d756a0ea\":{\"defs\":[],\"roots\":{\"references\":[{\"attributes\":{\"below\":[{\"id\":\"1244\"}],\"center\":[{\"id\":\"1247\"},{\"id\":\"1251\"}],\"left\":[{\"id\":\"1248\"}],\"renderers\":[{\"id\":\"1269\"}],\"title\":{\"id\":\"1296\"},\"toolbar\":{\"id\":\"1259\"},\"x_range\":{\"id\":\"1236\"},\"x_scale\":{\"id\":\"1240\"},\"y_range\":{\"id\":\"1238\"},\"y_scale\":{\"id\":\"1242\"}},\"id\":\"1235\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{},\"id\":\"1296\",\"type\":\"Title\"},{\"attributes\":{\"axis\":{\"id\":\"1244\"},\"ticker\":null},\"id\":\"1247\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"1298\",\"type\":\"AllLabels\"},{\"attributes\":{},\"id\":\"1256\",\"type\":\"ResetTool\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":0.5,\"fill_color\":\"lightgrey\",\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":1.0,\"line_color\":\"black\",\"line_dash\":[4,4],\"line_width\":2,\"right_units\":\"screen\",\"syncable\":false,\"top_units\":\"screen\"},\"id\":\"1258\",\"type\":\"BoxAnnotation\"},{\"attributes\":{\"overlay\":{\"id\":\"1258\"}},\"id\":\"1254\",\"type\":\"BoxZoomTool\"},{\"attributes\":{},\"id\":\"1302\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{},\"id\":\"1255\",\"type\":\"SaveTool\"},{\"attributes\":{\"data\":{\"x\":[0,1,2],\"y\":[0.49950000000000033,0.424180453174143,0.18300563355387592]},\"selected\":{\"id\":\"1304\"},\"selection_policy\":{\"id\":\"1303\"}},\"id\":\"1266\",\"type\":\"ColumnDataSource\"},{\"attributes\":{},\"id\":\"1238\",\"type\":\"DataRange1d\"},{\"attributes\":{\"formatter\":{\"id\":\"1299\"},\"major_label_policy\":{\"id\":\"1298\"},\"ticker\":{\"id\":\"1249\"}},\"id\":\"1248\",\"type\":\"LinearAxis\"},{\"attributes\":{},\"id\":\"1236\",\"type\":\"DataRange1d\"},{\"attributes\":{},\"id\":\"1242\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"1252\",\"type\":\"PanTool\"},{\"attributes\":{\"axis\":{\"id\":\"1248\"},\"dimension\":1,\"ticker\":null},\"id\":\"1251\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"1303\",\"type\":\"UnionRenderers\"},{\"attributes\":{\"line_color\":\"blue\",\"line_width\":3,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1267\",\"type\":\"Line\"},{\"attributes\":{},\"id\":\"1301\",\"type\":\"AllLabels\"},{\"attributes\":{},\"id\":\"1304\",\"type\":\"Selection\"},{\"attributes\":{\"active_multi\":null,\"tools\":[{\"id\":\"1252\"},{\"id\":\"1253\"},{\"id\":\"1254\"},{\"id\":\"1255\"},{\"id\":\"1256\"},{\"id\":\"1257\"}]},\"id\":\"1259\",\"type\":\"Toolbar\"},{\"attributes\":{},\"id\":\"1257\",\"type\":\"HelpTool\"},{\"attributes\":{},\"id\":\"1253\",\"type\":\"WheelZoomTool\"},{\"attributes\":{},\"id\":\"1249\",\"type\":\"BasicTicker\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"blue\",\"line_width\":3,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1268\",\"type\":\"Line\"},{\"attributes\":{},\"id\":\"1299\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{\"source\":{\"id\":\"1266\"}},\"id\":\"1270\",\"type\":\"CDSView\"},{\"attributes\":{\"formatter\":{\"id\":\"1302\"},\"major_label_policy\":{\"id\":\"1301\"},\"ticker\":{\"id\":\"1245\"}},\"id\":\"1244\",\"type\":\"LinearAxis\"},{\"attributes\":{\"data_source\":{\"id\":\"1266\"},\"glyph\":{\"id\":\"1267\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1268\"},\"view\":{\"id\":\"1270\"}},\"id\":\"1269\",\"type\":\"GlyphRenderer\"},{\"attributes\":{},\"id\":\"1245\",\"type\":\"BasicTicker\"},{\"attributes\":{},\"id\":\"1240\",\"type\":\"LinearScale\"}],\"root_ids\":[\"1235\"]},\"title\":\"Bokeh Application\",\"version\":\"2.3.3\"}};\n  var render_items = [{\"docid\":\"4ef43c57-2853-4063-a190-1291d756a0ea\",\"root_ids\":[\"1235\"],\"roots\":{\"1235\":\"f4804a89-bbda-45bb-b2c9-7f4348ad6b73\"}}];\n  root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n\n  }\n  if (root.Bokeh !== undefined) {\n    embed_document(root);\n  } else {\n    var attempts = 0;\n    var timer = setInterval(function(root) {\n      if (root.Bokeh !== undefined) {\n        clearInterval(timer);\n        embed_document(root);\n      } else {\n        attempts++;\n        if (attempts > 100) {\n          clearInterval(timer);\n          console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n        }\n      }\n    }, 10, root)\n  }\n})(window); </script>\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387637681_1726402393",
      "id": "20170621-120529_381271006",
      "dateCreated": "2020-01-07T17:00:37+0000",
      "dateStarted": "2021-07-26T04:32:24+0000",
      "dateFinished": "2021-07-26T04:32:24+0000",
      "status": "FINISHED",
      "$$hashKey": "object:9621"
    },
    {
      "title": "Download data for logics regression",
      "text": "%sh\n\ncd /tmp\nrm -rf sample_binary_classification_data.txt\nwget https://github.com/apache/spark/raw/master/data/mllib/sample_binary_classification_data.txt\n",
      "user": "anonymous",
      "dateUpdated": "2021-07-26T04:32:24+0000",
      "progress": 0,
      "config": {
        "runOnSelectionChange": true,
        "title": true,
        "checkEmpty": true,
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "sh",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/sh"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "--2021-07-26 04:32:26--  https://github.com/apache/spark/raw/master/data/mllib/sample_binary_classification_data.txt\nResolving github.com (github.com)... 52.74.223.119\nConnecting to github.com (github.com)|52.74.223.119|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://raw.githubusercontent.com/apache/spark/master/data/mllib/sample_binary_classification_data.txt [following]\n--2021-07-26 04:32:27--  https://raw.githubusercontent.com/apache/spark/master/data/mllib/sample_binary_classification_data.txt\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.110.133, 185.199.109.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 104736 (102K) [text/plain]\nSaving to: ‘sample_binary_classification_data.txt’\n\n     0K .......... .......... .......... .......... .......... 48% 24.0M 0s\n    50K .......... .......... .......... .......... .......... 97% 25.4M 0s\n   100K ..                                                    100% 4351G=0.004s\n\n2021-07-26 04:32:27 (25.2 MB/s) - ‘sample_binary_classification_data.txt’ saved [104736/104736]\n\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1579425300864_833813189",
      "id": "paragraph_1579425300864_833813189",
      "dateCreated": "2020-01-19T17:15:00+0000",
      "dateStarted": "2021-07-26T04:32:24+0000",
      "dateFinished": "2021-07-26T04:32:27+0000",
      "status": "FINISHED",
      "$$hashKey": "object:9622"
    },
    {
      "title": "Logistic Regression",
      "text": "%spark.pyspark\n\nfrom pyspark.ml.classification import LogisticRegression\nfrom pyspark.ml.classification import NaiveBayes\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import DoubleType\n\n# Load data\ndataset = spark.read.format(\"libsvm\").load(\"file:///tmp/sample_binary_classification_data.txt\")\ndataset = dataset.randomSplit([0.7,0.3])\ntrainSet, testSet = (dataset[0], dataset[1])\ntrainSet.cache()\ntestSet.cache()\n\nlr1 = LogisticRegression(maxIter=30, regParam=0.1, elasticNetParam=0.3)\n\n# Fit the model\nlrModel1 = lr1.fit(trainSet)\nlrTrainingSummary1 = lrModel1.summary\n\n# Obtain the objective per iteration\nobjectiveHistory1 = lrTrainingSummary1.objectiveHistory\n\nevaluateSummary = lrModel1.evaluate(testSet)\nevaluateSummary.areaUnderROC",
      "user": "anonymous",
      "dateUpdated": "2021-07-26T04:32:27+0000",
      "progress": 33,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6,
        "editorMode": "ace/mode/python",
        "title": true,
        "results": {},
        "enabled": true,
        "fontSize": 9,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "1.0"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {
        "jobUrl": {
          "propertyName": "jobUrl",
          "label": "SPARK JOB",
          "tooltip": "View in Spark web UI",
          "group": "spark",
          "values": [
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=9",
              "$$hashKey": "object:10442"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=10",
              "$$hashKey": "object:10443"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=11",
              "$$hashKey": "object:10444"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=12",
              "$$hashKey": "object:10445"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=13",
              "$$hashKey": "object:10446"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=14",
              "$$hashKey": "object:10447"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=15",
              "$$hashKey": "object:10448"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=16",
              "$$hashKey": "object:10449"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=17",
              "$$hashKey": "object:10450"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=18",
              "$$hashKey": "object:10451"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=19",
              "$$hashKey": "object:10452"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=20",
              "$$hashKey": "object:10453"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=21",
              "$$hashKey": "object:10454"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=22",
              "$$hashKey": "object:10455"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=23",
              "$$hashKey": "object:10456"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=24",
              "$$hashKey": "object:10457"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=25",
              "$$hashKey": "object:10458"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=26",
              "$$hashKey": "object:10459"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=27",
              "$$hashKey": "object:10460"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=28",
              "$$hashKey": "object:10461"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=29",
              "$$hashKey": "object:10462"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=30",
              "$$hashKey": "object:10463"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=31",
              "$$hashKey": "object:10464"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=32",
              "$$hashKey": "object:10465"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=33",
              "$$hashKey": "object:10466"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=34",
              "$$hashKey": "object:10467"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=35",
              "$$hashKey": "object:10468"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=36",
              "$$hashKey": "object:10469"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=37",
              "$$hashKey": "object:10470"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=38",
              "$$hashKey": "object:10471"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=39",
              "$$hashKey": "object:10472"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=40",
              "$$hashKey": "object:10473"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=41",
              "$$hashKey": "object:10474"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=42",
              "$$hashKey": "object:10475"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=43",
              "$$hashKey": "object:10476"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=44",
              "$$hashKey": "object:10477"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=45",
              "$$hashKey": "object:10478"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=46",
              "$$hashKey": "object:10479"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=47",
              "$$hashKey": "object:10480"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=48",
              "$$hashKey": "object:10481"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=49",
              "$$hashKey": "object:10482"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=50",
              "$$hashKey": "object:10483"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=51",
              "$$hashKey": "object:10484"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=52",
              "$$hashKey": "object:10485"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=53",
              "$$hashKey": "object:10486"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=54",
              "$$hashKey": "object:10487"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=55",
              "$$hashKey": "object:10488"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=56",
              "$$hashKey": "object:10489"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=57",
              "$$hashKey": "object:10490"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=58",
              "$$hashKey": "object:10491"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=59",
              "$$hashKey": "object:10492"
            },
            {
              "jobUrl": "http://3745c7ed824d:4040/jobs/job?id=60",
              "$$hashKey": "object:10493"
            }
          ],
          "interpreterSettingId": "spark"
        }
      },
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387637682_-1775952874",
      "id": "20170621-120800_296677966",
      "dateCreated": "2020-01-07T17:00:37+0000",
      "dateStarted": "2021-07-26T04:32:27+0000",
      "dateFinished": "2021-07-26T04:32:33+0000",
      "status": "FINISHED",
      "$$hashKey": "object:9623"
    },
    {
      "title": "Loss",
      "text": "%spark.pyspark\n\np = figure()\np.line(x=range(len(objectiveHistory1)), y=objectiveHistory1, color='blue', line_width=2, legend='Loss of LR1')\nshow(p)",
      "user": "anonymous",
      "dateUpdated": "2021-07-26T04:32:33+0000",
      "progress": 0,
      "config": {
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 6,
        "editorMode": "ace/mode/python",
        "title": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "Col1": "string",
                      "Col2": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true,
        "fontSize": 9,
        "runOnSelectionChange": true,
        "checkEmpty": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "BokehDeprecationWarning: 'legend' keyword is deprecated, use explicit 'legend_label', 'legend_field', or 'legend_group' keywords instead\n\n"
          },
          {
            "type": "HTML",
            "data": "\n\n\n\n\n\n  <div class=\"bk-root\" id=\"fbf995d8-b3f7-4956-8e2c-f38b3c9739c2\" data-root-id=\"1361\"></div>\n\n"
          },
          {
            "type": "HTML",
            "data": "<script> (function(root) {\n  function embed_document(root) {\n    \n  var docs_json = {\"fbe1a61a-449e-4d9a-9746-6144a366b2fc\":{\"defs\":[],\"roots\":{\"references\":[{\"attributes\":{\"below\":[{\"id\":\"1370\"}],\"center\":[{\"id\":\"1373\"},{\"id\":\"1377\"},{\"id\":\"1408\"}],\"left\":[{\"id\":\"1374\"}],\"renderers\":[{\"id\":\"1395\"}],\"title\":{\"id\":\"1398\"},\"toolbar\":{\"id\":\"1385\"},\"x_range\":{\"id\":\"1362\"},\"x_scale\":{\"id\":\"1366\"},\"y_range\":{\"id\":\"1364\"},\"y_scale\":{\"id\":\"1368\"}},\"id\":\"1361\",\"subtype\":\"Figure\",\"type\":\"Plot\"},{\"attributes\":{},\"id\":\"1403\",\"type\":\"AllLabels\"},{\"attributes\":{},\"id\":\"1404\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{},\"id\":\"1364\",\"type\":\"DataRange1d\"},{\"attributes\":{\"active_multi\":null,\"tools\":[{\"id\":\"1378\"},{\"id\":\"1379\"},{\"id\":\"1380\"},{\"id\":\"1381\"},{\"id\":\"1382\"},{\"id\":\"1383\"}]},\"id\":\"1385\",\"type\":\"Toolbar\"},{\"attributes\":{\"formatter\":{\"id\":\"1401\"},\"major_label_policy\":{\"id\":\"1400\"},\"ticker\":{\"id\":\"1375\"}},\"id\":\"1374\",\"type\":\"LinearAxis\"},{\"attributes\":{},\"id\":\"1401\",\"type\":\"BasicTickFormatter\"},{\"attributes\":{},\"id\":\"1378\",\"type\":\"PanTool\"},{\"attributes\":{\"source\":{\"id\":\"1392\"}},\"id\":\"1396\",\"type\":\"CDSView\"},{\"attributes\":{},\"id\":\"1400\",\"type\":\"AllLabels\"},{\"attributes\":{\"line_color\":\"blue\",\"line_width\":2,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1393\",\"type\":\"Line\"},{\"attributes\":{\"data_source\":{\"id\":\"1392\"},\"glyph\":{\"id\":\"1393\"},\"hover_glyph\":null,\"muted_glyph\":null,\"nonselection_glyph\":{\"id\":\"1394\"},\"view\":{\"id\":\"1396\"}},\"id\":\"1395\",\"type\":\"GlyphRenderer\"},{\"attributes\":{},\"id\":\"1383\",\"type\":\"HelpTool\"},{\"attributes\":{},\"id\":\"1375\",\"type\":\"BasicTicker\"},{\"attributes\":{\"axis\":{\"id\":\"1374\"},\"dimension\":1,\"ticker\":null},\"id\":\"1377\",\"type\":\"Grid\"},{\"attributes\":{\"data\":{\"x\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],\"y\":[0.6808899872666542,0.5193149105310685,0.2874985300029122,0.22923003748868925,0.20473375680826328,0.1953674220772277,0.18949809372789317,0.18435445121425975,0.1815618864948226,0.17851244239408526,0.17779897882905238,0.17756756771757415,0.17721250774034747,0.17707600841747947,0.17694480114422378,0.1768690936945488,0.17677186077112564,0.17661851948024643,0.17647283165576436,0.176255870258787,0.17612791357564886,0.17595469192239996,0.1757007501368575,0.17562495918126636,0.17557095748782373,0.17553473311536275,0.17550274930372053,0.17545065914490482,0.17541682560416572,0.1753802528156692,0.17536467284861282]},\"selected\":{\"id\":\"1406\"},\"selection_policy\":{\"id\":\"1405\"}},\"id\":\"1392\",\"type\":\"ColumnDataSource\"},{\"attributes\":{},\"id\":\"1379\",\"type\":\"WheelZoomTool\"},{\"attributes\":{},\"id\":\"1398\",\"type\":\"Title\"},{\"attributes\":{\"label\":{\"value\":\"Loss of LR1\"},\"renderers\":[{\"id\":\"1395\"}]},\"id\":\"1409\",\"type\":\"LegendItem\"},{\"attributes\":{\"overlay\":{\"id\":\"1384\"}},\"id\":\"1380\",\"type\":\"BoxZoomTool\"},{\"attributes\":{\"bottom_units\":\"screen\",\"fill_alpha\":0.5,\"fill_color\":\"lightgrey\",\"left_units\":\"screen\",\"level\":\"overlay\",\"line_alpha\":1.0,\"line_color\":\"black\",\"line_dash\":[4,4],\"line_width\":2,\"right_units\":\"screen\",\"syncable\":false,\"top_units\":\"screen\"},\"id\":\"1384\",\"type\":\"BoxAnnotation\"},{\"attributes\":{\"axis\":{\"id\":\"1370\"},\"ticker\":null},\"id\":\"1373\",\"type\":\"Grid\"},{\"attributes\":{},\"id\":\"1405\",\"type\":\"UnionRenderers\"},{\"attributes\":{},\"id\":\"1366\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"1381\",\"type\":\"SaveTool\"},{\"attributes\":{},\"id\":\"1406\",\"type\":\"Selection\"},{\"attributes\":{},\"id\":\"1382\",\"type\":\"ResetTool\"},{\"attributes\":{\"line_alpha\":0.1,\"line_color\":\"blue\",\"line_width\":2,\"x\":{\"field\":\"x\"},\"y\":{\"field\":\"y\"}},\"id\":\"1394\",\"type\":\"Line\"},{\"attributes\":{},\"id\":\"1368\",\"type\":\"LinearScale\"},{\"attributes\":{},\"id\":\"1362\",\"type\":\"DataRange1d\"},{\"attributes\":{\"formatter\":{\"id\":\"1404\"},\"major_label_policy\":{\"id\":\"1403\"},\"ticker\":{\"id\":\"1371\"}},\"id\":\"1370\",\"type\":\"LinearAxis\"},{\"attributes\":{},\"id\":\"1371\",\"type\":\"BasicTicker\"},{\"attributes\":{\"items\":[{\"id\":\"1409\"}]},\"id\":\"1408\",\"type\":\"Legend\"}],\"root_ids\":[\"1361\"]},\"title\":\"Bokeh Application\",\"version\":\"2.3.3\"}};\n  var render_items = [{\"docid\":\"fbe1a61a-449e-4d9a-9746-6144a366b2fc\",\"root_ids\":[\"1361\"],\"roots\":{\"1361\":\"fbf995d8-b3f7-4956-8e2c-f38b3c9739c2\"}}];\n  root.Bokeh.embed.embed_items_notebook(docs_json, render_items);\n\n  }\n  if (root.Bokeh !== undefined) {\n    embed_document(root);\n  } else {\n    var attempts = 0;\n    var timer = setInterval(function(root) {\n      if (root.Bokeh !== undefined) {\n        clearInterval(timer);\n        embed_document(root);\n      } else {\n        attempts++;\n        if (attempts > 100) {\n          clearInterval(timer);\n          console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\");\n        }\n      }\n    }, 10, root)\n  }\n})(window); </script>\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387637682_-1012332713",
      "id": "20170621-121651_569823333",
      "dateCreated": "2020-01-07T17:00:37+0000",
      "dateStarted": "2021-07-26T04:32:33+0000",
      "dateFinished": "2021-07-26T04:32:33+0000",
      "status": "FINISHED",
      "$$hashKey": "object:9624"
    },
    {
      "title": "",
      "text": "%spark.pyspark\n",
      "user": "anonymous",
      "dateUpdated": "2021-07-26T04:32:33+0000",
      "progress": 0,
      "config": {
        "colWidth": 12,
        "fontSize": 9,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "python",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1578387637682_-181840828",
      "id": "20170621-155011_1790753917",
      "dateCreated": "2020-01-07T17:00:37+0000",
      "dateStarted": "2021-07-26T04:32:33+0000",
      "dateFinished": "2021-07-26T04:32:33+0000",
      "status": "FINISHED",
      "$$hashKey": "object:9625"
    }
  ],
  "name": "4. Spark MlLib",
  "id": "2EZFM3GJA",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0-SNAPSHOT",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "default",
    "personalizedMode": "false"
  },
  "info": {},
  "path": "/Spark Tutorial/4. Spark MlLib"
}